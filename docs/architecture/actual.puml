@startuml
package entity-controller/id-manager/content-modifier/file-system{
annotation entity-controller/id-manager/content-modifier/file-system {

-var PathToIdentities: 
-var PathToFilesOfIdentities: 
+WriteFile(id *string, fileName *string, file *File): error
+ReadFile(id *string, name *string): *[]byte, error
+DeleteFile(id *string, name *string): error
+CreateFileSystemModifier(): Modifier
+InitializeOTPModifier()
+ReadAllIdentities(): *map[string]*UserOtp
+ReadIdentity(id *string): *UserOtp, error
+WriteIdentity(id *string, identity *UserOtp): error
+DeleteIdentity(id *string): error
+ReadFilesOfIdentity(id *string): []string
}
}
package entity-controller/id-manager/content-modifier{
annotation entity-controller/id-manager/content-modifier {
-const FileSystem: int8


}
class FileModifier {
+WriteFile: WriteFile
+ReadFile: ReadFile
+DeleteFile: DeleteFile

}
class OtpModifier {
+InitializeOTPModifier: InitializeOTPModifier
+ReadAllIdentities: ReadAllIdentities
+ReadIdentity: ReadIdentity
+WriteIdentity: WriteIdentity
+DeleteIdentity: DeleteIdentity
+ReadFilesOfIdentity: ReadFilesOfIdentity

}
class Modifier {
+FileModifier: FileModifier
+OtpModifier: OtpModifier

}
class UserOtp {
+Id: string
+Key: Key

}
class FilesystemUserOtp {
+URL_Key: string
+Issued_Date: string

}
class LoginChallenge {
+Files: []string

}
}
package entity-controller/id-manager{
annotation entity-controller/id-manager {

-var existingIDs: map[string]*UserOtp
-var Modifier: Modifier
+InitializeIDManager(modifierType *int8)
+ExistsIdentity(id *string): *UserOtp, error
+CreateIdentity(id *string, user_otp *UserOtp): error
+ReadFilesOfIdentity(id *string): []string
}
}
package entity-controller/security{
annotation entity-controller/security {

-var Block: Block
+InitializeSecurity(input_key *string)
+Encrypt(toEncrypt *[]byte): *[]byte, error
+Decrypt(toDecrypt *[]byte): *[]byte, error
}
}
package entity-controller{
annotation entity-controller {
-const SAFE_CHARACTERS: STRING
-var ValidateOtpOpts: ValidateOpts
-var idGenerator: *Shortid
-var GenerateOtpOpts: GenerateOpts
+ChallengeLogin(id *string, clientCode *string, time *Time): *UserOtp, error
+ChallengeReadFile(id *string, clientCode *string, time *Time, fileName *string): *[]byte, error
+ChallengeWriteFile(id *string, clientCode *string, time *Time, fileName *string, file *File): error
+ChallengeDeleteFile()
+ChallengeDeleteIdentity()
+InitializeOTPGenerator(key *string, modifier *int8, seed *uint64, issuer *string, period *uint)
+CreateIdentity(): *UserOtp, error
}
}
package helper{
annotation helper {


-getPort(): *string
-getIssuer(): *string
-getPeriod(): *uint
-getIDSeed(): *uint64
-getMaxSize(): *int64
-getModifier(): *int8
-getKey(): *string
+ReadEnv(): *string, *uint64, *string, *uint, *int64, *int8, *string
+CreateDirectory(folder string): error
+FilenameWithoutExtension(filename string): string
+ReadFileNamesOfDirectory(folder *string): []string
+MapUserID(id *string)
}
}
package http-api/common{
annotation http-api/common {


-extractCredentials(request *Request): *string, *string
-extractFileName(request *Request): *string
+ChallengeLoginHTTP(request *Request, writer ResponseWriter): *UserOtp, error
+ChallengeReadFileHTTP(request *Request, writer ResponseWriter): *[]byte, error
+ChallengeWriteFileHTTP(request *Request, writer ResponseWriter, maxSize *int64): error
+SanitizeFileName(fileName *string)
+SanitizeUploadFile(request *Request, maxSize *int64): string, string, File, *FileHeader, error
}
}
package http-api/responder/otp-identity-responder{
annotation http-api/responder/otp-identity-responder {
-const Combination: IdentityResponse
-const QR: IdentityResponse
-const Url: IdentityResponse

+SelectResponder(mode *IdentityResponse, newUser *UserOtp, w *ResponseWriter): IdentityResponder
}
interface IdentityResponder{
+Send()
}
class CombinedResponder {
+Tool: IdentityResponderTool
+Send()
}
class CombinedTemplate {
+OtpUrl: URL
+Image: string

}
class QRCodeResponder {
+Tool: IdentityResponderTool
+Send()
}
class IdentityResponderTool {
+NewUser: *UserOtp
+HttpResponder: *ResponseWriter

}
class UrlResponder {
+Tool: IdentityResponderTool
+Send()
}
}
package http-api/responder/otp-login-responder{
annotation http-api/responder/otp-login-responder {
-const FileList: LoginResponse
-const AccountInterface: LoginResponse

+SelectResponder(mode *LoginResponse, foundID *UserOtp, w *ResponseWriter): LoginResponder
}
interface LoginResponder{
+Send()
}
class AccountInterfaceResponder {
+Tool: LoginResponderTool
+Send()
}
class AccountInterfaceTemplate {
+UserID: string
+Files: []string

}
class FileListResponder {
+Tool: LoginResponderTool
+Send()
}
class FileListTemplate {
+UserID: string

}
class LoginResponderTool {
+User: *UserOtp
+Files: []string
+HttpResponder: *ResponseWriter

}
}
package http-api{
annotation http-api {


+FileHandler(maxSize *int64)
+MiscHandler()
+OTPHandler()
+InitializeHTTPServer(port *string, maxSize *int64)
}
}
package .{
annotation . {


-main()
}
}
"Modifier" --> "FileModifier"
"Modifier" --> "OtpModifier"
"IdentityResponderTool" --> "UserOtp"
"LoginResponderTool" --> "UserOtp"
"CombinedResponder" --> "IdentityResponderTool"
"QRCodeResponder" --> "IdentityResponderTool"
"UrlResponder" --> "IdentityResponderTool"
"AccountInterfaceResponder" --> "LoginResponderTool"
"FileListResponder" --> "LoginResponderTool"
"CombinedResponder" --|> "IdentityResponder"
"CombinedResponder" --|> "LoginResponder"
"QRCodeResponder" --|> "IdentityResponder"
"QRCodeResponder" --|> "LoginResponder"
"UrlResponder" --|> "IdentityResponder"
"UrlResponder" --|> "LoginResponder"
"AccountInterfaceResponder" --|> "IdentityResponder"
"AccountInterfaceResponder" --|> "LoginResponder"
"FileListResponder" --|> "IdentityResponder"
"FileListResponder" --|> "LoginResponder"
@enduml