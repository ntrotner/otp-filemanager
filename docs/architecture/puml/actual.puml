@startuml
package helper{
annotation helper {


-getPort(): *string
-getIssuer(): *string
-getPeriod(): *uint
-getIDSeed(): *uint64
+ReadEnv(): *string, *uint64, *string, *uint
+CreateDirectory(folder string): error
+FilenameWithoutExtension(filename string): string
+ReadFileNamesOfDirectory(folder *string): []string
}
}
package http-api/otp-identity-responder{
annotation http-api/otp-identity-responder {
-const Url: IdentityResponse
-const Combination: IdentityResponse
-const QR: IdentityResponse

+SelectResponder(mode *IdentityResponse, newUser *UserOtp, w *ResponseWriter): IdentityResponder
}
interface IdentityResponder{
+Send()
}
class CombinedResponder {
+Tool: IdentityResponderTool
+Send()
}
class CombinedTemplate {
+OtpUrl: URL
+Image: string

}
class QRCodeResponder {
+Tool: IdentityResponderTool
+Send()
}
class IdentityResponderTool {
+NewUser: *UserOtp
+HttpResponder: *ResponseWriter

}
class UrlResponder {
+Tool: IdentityResponderTool
+Send()
}
}
package http-api/otp-login-responder{
annotation http-api/otp-login-responder {
-const FileList: LoginResponse
-const AccountInterface: LoginResponse

+SelectResponder(mode *LoginResponse, foundID *UserOtp, w *ResponseWriter): LoginResponder
}
interface LoginResponder{
+Send()
}
class AccountInterfaceResponder {
+Tool: LoginResponderTool
+Send()
}
class AccountInterfaceTemplate {
+UserID: string
+Files: []string

}
class FileListResponder {
+Tool: LoginResponderTool
+Send()
}
class FileListTemplate {
+UserID: string

}
class LoginResponderTool {
+User: *UserOtp
+Files: []string
+HttpResponder: *ResponseWriter

}
}
package http-api{
annotation http-api {


+FileHandler()
+MiscHandler()
+OTPHandler()
+InitializeHTTPServer(port *string)
}
}
package permission-controller/id-manager/content-modifier{
annotation permission-controller/id-manager/content-modifier {

-var PathToFilesOfIdentities: 
-var pathToIdentities: 
+WriteFile()
+ReadFile()
+DeleteFile()
+InitializeOTPModifier()
+ReadAllIdentities(): *map[string]*UserOtp
+ReadIdentity(id *string): *UserOtp, error
+WriteIdentity(id *string, identity *UserOtp): error
+DeleteIdentity(id *string): error
+ReadFilesOfIdentity(id *string): []string
}
class LoginChallenge {
+Files: []string

}
class UserOtp {
+Id: string
+Key: Key

}
class FilesystemUserOtp {
+URL_Key: string
+Issued_Date: string

}
}
package permission-controller/id-manager{
annotation permission-controller/id-manager {

-var existingIDs: map[string]*UserOtp
+InitializeIDManager()
+ExistsIdentity(id *string): *UserOtp, error
+CreateIdentity(id *string, user_otp *UserOtp): error
+ReadFilesOfIdentity(id *string): []string
}
}
package permission-controller{
annotation permission-controller {

-var idGenerator: *Shortid
-var GenerateOtpOpts: GenerateOpts
-var ValidateOtpOpts: ValidateOpts
+ChallengeLogin(id *string, clientCode *string, time *Time): *UserOtp, error
+ChallengeReadFile()
+ChallengeWriteFile()
+ChallengeDeleteFile()
+ChallengeDeleteIdentity()
+InitializeOTPGenerator(seed *uint64, issuer *string, period *uint)
+CreateIdentity(): *UserOtp, error
}
}
package .{
annotation . {


-main()
}
}
CombinedResponder --> IdentityResponderTool
QRCodeResponder --> IdentityResponderTool
UrlResponder --> IdentityResponderTool
IdentityResponderTool --> UserOtp
AccountInterfaceResponder --> LoginResponderTool
FileListResponder --> LoginResponderTool
LoginResponderTool --> UserOtp
CombinedResponder --|> IdentityResponder
CombinedResponder --|> LoginResponder
QRCodeResponder --|> IdentityResponder
QRCodeResponder --|> LoginResponder
UrlResponder --|> IdentityResponder
UrlResponder --|> LoginResponder
AccountInterfaceResponder --|> IdentityResponder
AccountInterfaceResponder --|> LoginResponder
FileListResponder --|> IdentityResponder
FileListResponder --|> LoginResponder
@enduml